@page "/register"
@using Security.Abstractions.Models.Accounts;
@inject NavigationManager NavigationManager
@inject IUserApiClient UserApiClient
<!-- note: using styles, not css, we will target Isolated CSS for this component when we upgrade to .NET5 -->
<Overlay>
    <div style=" margin: 0 auto; margin-top: 10%; max-width: 400px;">
        <div class="register-box">
            <div class="register-logo">
                <a href="./index2.html"><b>Admin</b>LTE</a>
            </div>
            <div class="card">
                <div class="card-body register-card-body">
                    <p class="login-box-msg">Register a new membership</p>
@*                    <form action="../../index.html" method="post">
*@
                    <Input @bind-Value="fullName" />
                    <Input @bind-Value="email" />
                    <Input @bind-Value="password" />
                    <Input @bind-Value="passwordVerify" />
                        <div class="row">
                            <div class="col-8">
                                    <CustomCheckbox @bind-Value="isAgreeTos" />
                            </div>

                            <div class="col-4">
                                <Button OnClick="OnRegister">Register</Button>
                            </div>

                        </div>
@*                    </form>*@
@if (!string.IsNullOrEmpty(alertBody)) {
                    <Alert Type="AlertType.Danger" Title="@alertTitle">
                        @alertBody
                    </Alert>
}
@*                    <div class="social-auth-links text-center">
                        <p>- OR -</p>
                        <a href="#" class="btn btn-block btn-primary">
                            <i class="fab fa-facebook mr-2"></i>
                            Sign up using Facebook
                        </a>
                        <a href="#" class="btn btn-block btn-danger">
                            <i class="fab fa-google-plus mr-2"></i>
                            Sign up using Google+
                        </a>
                    </div>*@
                    <a href="login" class="text-center">I already have a membership</a>
                </div>

            </div>
        </div>
    </div>
</Overlay>
@code {
    string alertBody;
    string alertTitle;

    InputState fullName = new InputState() { Identifier = "fullName", Placeholder = "Enter Full Name", Type = "text", Icon = "fas fa-user" };
    InputState email = new InputState() { Identifier = "email", Placeholder = "Enter email", Type = "email", Icon = "fas fa-envelope" };
    InputState password = new InputState() { Identifier = "password", Placeholder = "Enter password", Type = "password", Icon = "fas fa-lock" };
    InputState passwordVerify = new InputState() { Identifier = "passwordVerify", Placeholder = "Verify password", Type = "password", Icon = "fas fa-lock" };
    CustomCheckboxState isAgreeTos = new CustomCheckboxState()
        {
            Identifier = "isAgreeTos",
            Value = "true",
            Label = "I agree to the <a href='#'>terms</a>" 
        };


    async void OnRegister() {
        try
        {
            await UserApiClient.RegisterAsync(new RegisterRequest()
                {
                    AcceptTerms = true,
                    Email = email.Value,
                    FirstName = fullName.Value,
                    LastName = "bla",
                    Title = "",
                    Password = password.Value,
                    ConfirmPassword = passwordVerify.Value
                });
            NavigationManager.NavigateTo("thanks-for-registering");
        }
        catch (ApiException ex)
        {
            var l = ex.ResponseObject;
            alertTitle = l.Title;
            alertBody = "";
            if (l.Errors.ConfirmPassword != null && l.Errors.ConfirmPassword.Length > 0) {
                alertBody += l.Errors.ConfirmPassword[0];
                passwordVerify.BorderColor = Color.Danger;
                passwordVerify.IconBgColor = Color.Danger;
            }
            if (l.Errors.Email != null && l.Errors.Email.Length > 0)
            {
                alertBody += l.Errors.Email[0];
                email.BorderColor = Color.Danger;
                email.IconBgColor = Color.Danger;
            }
            
            StateHasChanged();
        }
    }
}
